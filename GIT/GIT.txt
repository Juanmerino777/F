-------------------------++ GIT ++----------------------------

. DEFINICON:

  GIT= Es un sistema de control de versiones que nos permite rastrear los cambios que hemos hecho en un archivo.
  

. COMANDOS DE CONFIGURACION:

  git config --global user.name "NOMBRE DE USUARIO" = Crea usuario.
  git config --global usar.email "CORREO DE USUARIO" = Registra correo.
  git config --global core.editor "code --wait" = permite seleccionar a (vscode) como editor de texto.
  git config user.name = verificamos usuario.
  git config user.email = verifica el correo.

  NOTA = si la configuracion es para un repocitorio en especifico omitimos el (--global).


.COMANDOS BASICOS DE GIT:
  
  mkdir + nombreDeCarpeta = Crea un carpeta nueva.
  rmdir + nombreDeCarpeta =  Elimina una carpeta.
  cd + nombreDeCarpeta = muestra el contenido de una carpeta.
  CD.. = Regresa a carpeta anterior.
  cd = regresa a carpeta primcipal o raiz.
  clear = Linpia pantalla de git.

  nota= si el nombre de la carpeta tiene espacios se debe rodear con comillas.
  

.--------------AREAS DE GIT:----------------------

         #1                  #2               #3
      (Carpeta)  => (Area de preparacion) => (Comit)
      Modificada =>       preparada       => Confirmada
      modified   =>        staged         => committed

  *MODIFICADA= Cuando creas el archivo y le agregamos contenido .

  *PREPARADA= Cuando la enlazamos al hosting con el comando ( add . ) pero no a sido comfirmada como comprometida o (commit).

  *CONFIRMADA= Cuando subimos los cambios con comando ( git commit ) creando una version para los cambios.


INICIALIZANDO UN REPOCITORIO:

  git init = Inicializa un repocitorio local llamado (master o main dependiendo del nombre que allamos asignado globalmente) creando una cartpeta (.git) dentro de nuestro proyecto pero solo de manera local.

    NOTA = para eliminar un repocitorio local vasta con eliminar la carpeta ( .git) del almacenamiento.
    git config --global init.defaulbranch = cambiamos el nombre de master.

   
  git status = Muestra en que rama estamos, el estado actual de commit, los cambios realizados, como agregarlos con el comando (add) en caso de ignorar los cambios usamos el comando (git restore) para descartar los cambios.

  git add + nombreDeCarpetaNoConfirmada = agrega cambios de la carpeta seleccionada al area de preparada quedando lista para realizar un commit.

    NOTA: si queremos agregar todos los cambios no confirmados usamos el comando (git add .).
  
  el comando 
  git rm --cached + nombreDeCarpeta = remueve o ignora los cambios del area de preparacion.


AGREGAR UN COMMIT:

  COMMIT= Forma de registrar los cambios que realizamos al documento de esa forma podemos acceder al antes y despues del documento.
    NOTA: al crear el commit generamos un identificador unico (SHA = secure hash algorithm) que nos muestra nombre de autor, correo, fecha y descripcion del commit.

FORMAS DE REALIZAR COMMIT:

    1. git commit -m "descripcion del cambio realizado" = realizamos el commit directamente en git.

    2. git commit y ENTER = de esta forma realzamos el commit con la ayuda de visual Estudio (vs code).

    3. directamente con visual Estudio (vs code).

  nota = para verificar los commit realizados utilizamos el comando:
    git log = Muestra historial de commit completo.
    git log --oneline = Muestra los commit en una sola linea. 
    git log -p = Muestra los commit con los cambios que hemos realizado en las diferentes ramas.


EDITAR UN COMMIT:

  git commit --amend = nos permite editar el ultimo commit agregado.

ELIMINAR UN COMMIT:

  git reset --solft HEAD~1 = elimina commit manteniendo los cambios.
  git reset --hard HEAD~1 = elimina commit pero sin mantener los cambios.
                          
    NOTA: el numero identifica el retroceso para celeccionar el commit a eliminar.


. -------------------RAMAS EN GIT:------------------------------------  

  DEFINICION:
    RAMA O (branch) = es una copia o linea independiente que creamos para no afectar directamente el proyecto.

  COMANDOS:

    git branch = verifica ramas existentes mostrando sus nombres.

    git branch + nombreDeRama = crea una rama sin ubicarte dentro e la misma.

    git branch -m + nombreNuevoDeRama = modifica el nombre de una rama.
      NOTA= de esta manera tenemos que estar dentro de la rama a modificar.
    
    git branch -m + nombreDeRamaActual Y nombreDeRamaNueva = modifica el nombre sin la nesecidad de estar dentro de la misma.

    git branch -d + nombreDeRama = elimina la rama seleccionada.
        
    git chekout + nombreDeRama = ingresar a una rama.

    git chekout -b + nombreDeRamaNueva = crea la rama y te ubica dentro de la misma. 

    
  fusionar rama o (Merge):

    git merge + nombreDeRama = nos permite combinar una rama con la rama primcipal.
      nota = para la combinacion debemos estar en la rama raiz.

      git merge --continue = continuar con proceso de combinacion.